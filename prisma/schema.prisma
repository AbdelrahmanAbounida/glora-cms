generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum UserRole {
  AGENCY_OWNER
  AGENCY_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}


model Account {
  id    String @id @default(uuid()) 
  userId             String 
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}
model User {
  id String @id @default(uuid())
  name    String? 
  email String? @unique
  emailVerified DateTime?
  hashedPassword String?
  image         String?
  role        UserRole @default(SUBACCOUNT_USER)
  accounts      Account[]
  agencyId      String? // each user has only one agency 
  agency        Agency?     @relation(fields: [agencyId],references: [id],onDelete: Cascade)
  notifications   Notification[]
  permission      Permission[]

  // verificationToken AuthToken?    @relation(name: "VerificationToken")
  // passwordResetToken  AuthToken?  @relation(name: "PasswordResetToken")
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  @@index([agencyId])
}

model TwoFactorConfirmation {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model VerificationToken {
  id String @id @default(uuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(uuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(uuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

// Start Here 
model Agency {
  id String @id @default(uuid())
  agencyName  String 
  agencyLogo  String? 
  agencyEmail String @unique
  phoneNumber  String  // TODO:: to be validated 
  whiteLabel  Boolean @default(false)
  address String 
  city  String?
  state String? 
  zipcode Int?
  country String 

  users            User[]
  subaccounts     SubAccount[]
  notifications   Notification[]
  invitations   Invitation[]

  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
}


model SubAccount {
  id String @id @default(uuid())
  agencyId    String

  name             String
  subAccountLogo   String?                    @db.Text
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  companyEmail     String                    @db.Text
  companyPhone     String
  goal             Int                       @default(5)
  address          String
  city             String
  zipCode          String
  state            String
  country          String
  agency      Agency    @relation(fields: [agencyId],references: [id],onDelete: Cascade)
  notifications   Notification[]
  permission      Permission[]

 @@index([agencyId])
}

model Permission {
  id  String  @id @default(uuid())
  giverId       String   // the person who gave this permission to the below user Email
  subaccountId    String
  subAccount      SubAccount  @relation(fields: [subaccountId],references: [id],onDelete: Cascade)

  userEmail     String
  user          User    @relation(fields: [userEmail],references: [id],onDelete: Cascade)

  hasAccess     Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Notification {
  id String @id @default(uuid())
  agencyId    String
  subAccountId  String?
  userId       String
  content       String
 User       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Agency     Agency      @relation(fields: [agencyId], references: [id], onDelete: Cascade)
  SubAccount SubAccount? @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


   @@index([agencyId])
   @@index([subAccountId])

}


enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}
model Invitation {
  id String @id @default(uuid())
  senderEmail     String 
  email      String @unique
  agencyId    String 
  agency      Agency @relation(fields: [agencyId],references: [id],onDelete: Cascade)
  status   InvitationStatus @default(PENDING)
  role      UserRole    @default(SUBACCOUNT_USER)
  @@index([agencyId])
}